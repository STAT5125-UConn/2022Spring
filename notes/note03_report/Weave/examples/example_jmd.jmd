---
title : STAT 5125 - Generating reports using Weave.jl
author : HaiYing Wang
date: `j import Dates; Dates.Date(Dates.now())`
---

```julia; echo = false
using Dates
```

# Introduction

This a sample [Julia](http://julialang.org/) markdown document that can
be executed using [Weave.jl](https://github.com/JunoLab/Weave.jl).

The code is delimited from docs using markdown fenced code blocks
markup. 

You can create markdown output or pdf (with xelatex) and HTML directly using
the weave command as follows:


```julia
a = sum(rand(100))
```

The value of a is `j a`.


```julia; eval=false
using Weave
#Markdown
weave("example_jmd.jmd", out_path="output/", doctype="github")
#HTML
weave("example_jmd.jmd", out_path="output/", doctype="md2html")
#pdf
weave("example_jmd.jmd", out_path="output/", doctype="md2pdf")
```
# Chunk Options

You can use chunk options to configure how each chunk is evaluated, rendered, etc.
Most of the ideas came from [chunk options in RMarkdown](http://yihui.name/knitr/options).


## Syntax

Chunk options come after code chunk header.
There are two (slightly) different syntax to write them:
- (Julia's toplevel expression) options are separated by semicolon (`;`)
- (RMarkdown style) options are separated by comma (`,`)

Let's take a look at examples. All the following code chunk header are valid,
and so configured to hide the source code from generated output (`echo = false`)
and displays figures with 12cm width (`out_width = "12cm"`):
```md
 ```julia; echo = false; out_width = "12cm"

 ```{julia; echo = false; out_width = "12cm"}

 ```julia, echo = false, out_width = "12cm"

 ```{julia, echo = false, out_width = "12cm"}
```

## Weave Chunk Options

Weave currently supports the following chunk options:
we've mostly followed [RMarkdown's namings](http://yihui.name/knitr/options), but not all options are implemented.

### Evaluation

- `eval = true`: Evaluate the code chunk. If `false` the chunk won’t be executed.
- `error = true`: If `true`, `weave` won't stop on errors and rather they will be included in output document. If `false`, `weave` will halt on any of un-caught errors.
- `cache = false`: Cache results, depending on `cache` parameter on `weave` function.
- `tangle = true`: Set tangle to `false` to exclude chunk from tangled code.

### Rendering

- `echo = true`: Echo the code in the output document. If `false` the source code will be hidden.
- `results = "markup"`: The output format of the printed results. `"markup"` for literal block, `"hidden"` for hidden results, or anything else for raw output (I tend to use `"tex"` for Latex and `"rst"` for rest). Raw output is useful if you want to e.g. create tables from code chunks.
- `term = false`: If `true` the output emulates a REPL session. Otherwise only stdout and figures will be included in output.
- `wrap = true`: Wrap long lines from output.
- `line_width = 75`: Line width for wrapped lines.
- `hold = false`: Hold all results until the end of the chunk.

### Figures

- `label = nothing`: Chunk label, will be used for figure labels in Latex as `fig:label`.
- `fig_width = 6`: Figure width passed to plotting library.
- `fig_height = 4`: Figure height passed to plotting library.
- `out_width`: Width of saved figure in output markup e.g. `"50%"`, `"12cm"`, `0.5\linewidth`
- `out_height`: Height of saved figure in output markup
- `dpi = 96`: Resolution of saved figures.
- `fig_cap`: Figure caption.
- `fig_ext`: File extension (format) of saved figures.
- `fig_pos = "!h"`: Figure position in Latex, e.g.: `"ht"`.
- `fig_env = "figure"`: Figure environment in Latex.

# Header Configuration

When `weave`ing a markdown document, you use YAML header to provide additional metadata and configuration options.
A YAML header should be in the beginning of the input document delimited with `---`.

## Document Metadata

You can set additional document metadata in YAML header.
When `weave`ing to Julia markdown documents to HTML or PDF, Weave respects the following metadata specification:
- `title`
- `author`
- `date`

An example:
```yaml
---
title : Header Example
author : Shuhei Kadowaki
date: 16th May 2020
---
```

!!! note
    You can also have other metadata, but they won't appear in the resulting HTML and PDF.
    If you weave to Julia markdown to GitHub/Hugo markdown, all the metadata will be preserved.

### Dynamic Metadata

The metadata can be given "dynamically"; if you have inline code within YAML header, they will be evaluated _after_ evaluating all the chunks and replaced with the results.

The example document below will set `date` metadata dynamically.
Note that `Date` is available since the chunk is evaluated first.
````md
 ---
 title : Header Example
 author : Shuhei Kadowaki
 date: `j import Dates; Dates.Date(Dates.now())`
 ---

 ```julia; echo = false
 using Dates
 ```
````

## Configuration Options

Each of keyword arguments of [`weave`](@ref) can be set in the YAML header under `options` field.
You can also set [Chunks Options](@ref) there that will be applied globally.

The example below sets `out_path` and `doctype` options and overwrites `term` and `wrap` chunk options:
```yaml
---
title : Header Example
author : Shuhei Kadowaki
date: 16th May 2020
weave_options:
  out_path: relative/path/to/this/document
  doctype: github
  term: true
  wrap: false
---
```

!!! note
    - configurations specified within the YAML header have higher precedence than those specified via `weave` keyword arguments
    - chunk options specified within each chunk have higher precedence than the global global chunk options specified within the YAML header

!!! warning
    As opposed to metadata, _most_ of those configuration options can't be given dynamically (i.e. can't be via inline code),
    since they are needed for evaluation of chunks themselves.
    But some configuration options that are needed "formatting" document can still be given dynamically:
    - `template`
    - `css`
    - `highlight_theme`
    - `pandoc_options`
    - `latex_cmd`
    - `keep_unicode`

## Format Specific Options

The header configurations can be format specific.
Here is how to set different `out_path` for `md2html` and `md2pdf` and set `fig_ext` globally:
```yaml
---
weave_options:
  md2html:
    out_path : html
  md2pdf:
    out_path : pdf
  fig_ext : .png
---
```

<!-- this setup dependencies, but doesn't appear in the generated document -->
```julia; echo = false; results = "hidden"
using Pkg
"Plots" ∉ keys(Pkg.project().dependencies) && Pkg.add("Plots")
"DataFrames" ∉ keys(Pkg.project().dependencies) && Pkg.add("DataFrames")
```

## Some useful commands in Julia REPL:

- ? (enters help mode);
- ; (enters system shell mode);
- ] (enters package manager mode);
- Ctrl-c (interrupts computations);
- Ctrl-d (exits Julia);
- Ctrl-l clears screen;
- putting ; after the expression will disable showing its value in REPL.

## Examples of some essential functions:

Loops and comprehensions rebind variables on each iteration, so they are 
safe to use then creating closures in iteration:
```julia
Fs = Array{Any}(undef, 2)
for i in 1:2
    Fs[i] = () -> i
end
Fs[1](), Fs[2]() # (1, 2)
```

You can also control the way the results are captured, plot size etc.
using chunk options. Here is an example of a chunk that behaves like a repl.

```{julia;term=true}
x = 1:10
d = Dict("Weave" => "testing")
y = [2, 4 ,8]
```

## Plotting
There are several plotting packages for Julia like Plots.jl (which is
an umbrella packages for several plotting backends). Here we show how to use it
(version 1.13.2):
```julia
using Plots
using Random
Random.seed!(1) # make the plot reproducible
x, y = 1:100, randn(100)
plot(x, y) # line plot
```
You can also for instance hide the code and show only the figure, add a
caption to the figure and make it wider as follows (you can only see the
syntax from the source document):

```{julia;echo=false; fig_cap="A line plot."; label="fig-A"; fig_width=4; fig_height=2}
plot(x, y) # line plot
```

## Working with tabular data

There are multiple packages supporting tabular data for the Julia language.
Here we will show how DataFrames.jl package can be used.
```julia
using DataFrames
df = DataFrame(x=y, y=y) 
first(df, 5)
# print first 5 rows of a data frame; use the last function for last rows
```

The code is delimited from docs using markdown fenced code blocks
markup. 

You can create markdown output or pdf (with xelatex) and HTML directly using
the weave command as follows:

```julia; eval=false; echo=false
using Weave
#Markdown
weave("example_jmd.jmd", out_path="output/", doctype="github")
#HTML
weave("example_jmd.jmd", out_path="output/")
#pdf
weave("example_jmd.jmd", out_path="output/", doctype="md2pdf")
```

